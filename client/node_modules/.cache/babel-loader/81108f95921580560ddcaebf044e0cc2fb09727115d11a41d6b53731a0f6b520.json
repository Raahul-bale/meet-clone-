{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\raahu\\\\Desktop\\\\google-meet-clone\\\\client\\\\src\\\\components\\\\MeetingRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport './MeetingRoom.css';\nimport Controls from './Controls';\nimport VideoGrid from './VideoGrid';\nimport ChatPanel from './ChatPanel';\nimport ParticipantsPanel from './ParticipantsPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeetingRoom = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef({});\n  const [peers, setPeers] = useState({});\n  const [stream, setStream] = useState(null);\n  const [audioEnabled, setAudioEnabled] = useState(true);\n  const [videoEnabled, setVideoEnabled] = useState(true);\n  const [showChat, setShowChat] = useState(false);\n  const [showParticipants, setShowParticipants] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [participants, setParticipants] = useState({});\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [userName, setUserName] = useState('');\n  const screenTrackRef = useRef(null);\n  const [isCopied, setIsCopied] = useState(false);\n  useEffect(() => {\n    // Get stored username or generate one\n    const storedName = localStorage.getItem('userName') || `User-${Math.floor(Math.random() * 1000)}`;\n    setUserName(storedName);\n    const uid = Math.random().toString(36).substring(2, 15);\n    setUserId(uid);\n\n    // Connect to socket\n    socketRef.current = io.connect(process.env.REACT_APP_SERVER_URL || 'http://localhost:5000');\n\n    // Get media stream\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = currentStream;\n      }\n\n      // Join room\n      socketRef.current.emit('join-room', roomId, uid, storedName);\n\n      // Listen for room participants\n      socketRef.current.on('room-participants', allParticipants => {\n        setParticipants(allParticipants);\n      });\n\n      // Handle when new user connects\n      socketRef.current.on('user-connected', (newUserId, newUserName) => {\n        console.log(`User connected: ${newUserName}`);\n\n        // Add to participants\n        setParticipants(prev => ({\n          ...prev,\n          [newUserId]: {\n            userName: newUserName\n          }\n        }));\n\n        // Create peer connection for the new user\n        const peer = createPeer(newUserId, socketRef.current.id, currentStream);\n        peersRef.current = {\n          ...peersRef.current,\n          [newUserId]: {\n            peer\n          }\n        };\n        setPeers(prev => ({\n          ...prev,\n          [newUserId]: {\n            peer,\n            userName: newUserName\n          }\n        }));\n      });\n\n      // Handle incoming signal\n      socketRef.current.on('signal', ({\n        from,\n        signal\n      }) => {\n        if (!peersRef.current[from]) {\n          var _participants$from;\n          // Create receiving peer if it doesn't exist\n          const peer = addPeer(from, signal, currentStream);\n          peersRef.current = {\n            ...peersRef.current,\n            [from]: {\n              peer\n            }\n          };\n          const peerUserName = ((_participants$from = participants[from]) === null || _participants$from === void 0 ? void 0 : _participants$from.userName) || 'Unknown User';\n          setPeers(prev => ({\n            ...prev,\n            [from]: {\n              peer,\n              userName: peerUserName\n            }\n          }));\n        } else {\n          // Signal the existing peer\n          peersRef.current[from].peer.signal(signal);\n        }\n      });\n\n      // Handle user disconnect\n      socketRef.current.on('user-disconnected', userId => {\n        console.log(`User disconnected: ${userId}`);\n        if (peersRef.current[userId]) {\n          peersRef.current[userId].peer.destroy();\n          const newPeersRef = {\n            ...peersRef.current\n          };\n          delete newPeersRef[userId];\n          peersRef.current = newPeersRef;\n          setPeers(prev => {\n            const newPeers = {\n              ...prev\n            };\n            delete newPeers[userId];\n            return newPeers;\n          });\n          setParticipants(prev => {\n            const newParticipants = {\n              ...prev\n            };\n            delete newParticipants[userId];\n            return newParticipants;\n          });\n        }\n      });\n\n      // Handle incoming chat messages\n      socketRef.current.on('receive-message', message => {\n        setMessages(prev => [...prev, message]);\n      });\n\n      // Handle audio toggle events\n      socketRef.current.on('user-toggle-audio', (userId, isEnabled) => {\n        setParticipants(prev => ({\n          ...prev,\n          [userId]: {\n            ...prev[userId],\n            isAudioEnabled: isEnabled\n          }\n        }));\n      });\n\n      // Handle video toggle events\n      socketRef.current.on('user-toggle-video', (userId, isEnabled) => {\n        setParticipants(prev => ({\n          ...prev,\n          [userId]: {\n            ...prev[userId],\n            isVideoEnabled: isEnabled\n          }\n        }));\n      });\n\n      // Handle screen sharing events\n      socketRef.current.on('user-started-sharing', sharingUserId => {\n        setParticipants(prev => ({\n          ...prev,\n          [sharingUserId]: {\n            ...prev[sharingUserId],\n            isScreenSharing: true\n          }\n        }));\n      });\n      socketRef.current.on('user-stopped-sharing', sharingUserId => {\n        setParticipants(prev => ({\n          ...prev,\n          [sharingUserId]: {\n            ...prev[sharingUserId],\n            isScreenSharing: false\n          }\n        }));\n      });\n    }).catch(err => {\n      console.error(\"Error accessing media devices:\", err);\n      alert(\"Unable to access camera and microphone. Please make sure they're connected and permissions are granted.\");\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      // Stop all tracks\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n      if (screenTrackRef.current) {\n        screenTrackRef.current.getTracks().forEach(track => track.stop());\n      }\n\n      // Close all peer connections\n      Object.values(peersRef.current).forEach(({\n        peer\n      }) => {\n        peer.destroy();\n      });\n\n      // Close socket connection\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', signal => {\n      socketRef.current.emit('signal', {\n        to: userToSignal,\n        from: callerID,\n        signal\n      });\n    });\n    return peer;\n  };\n  const addPeer = (callerID, incomingSignal, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', signal => {\n      socketRef.current.emit('signal', {\n        to: callerID,\n        from: userId,\n        signal\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  };\n  const toggleAudio = () => {\n    if (stream) {\n      const audioTrack = stream.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n        setAudioEnabled(audioTrack.enabled);\n        socketRef.current.emit('toggle-audio', audioTrack.enabled);\n      }\n    }\n  };\n  const toggleVideo = () => {\n    if (stream) {\n      const videoTrack = stream.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !videoTrack.enabled;\n        setVideoEnabled(videoTrack.enabled);\n        socketRef.current.emit('toggle-video', videoTrack.enabled);\n      }\n    }\n  };\n  const shareScreen = () => {\n    if (isScreenSharing) {\n      // Stop screen sharing\n      if (screenTrackRef.current) {\n        screenTrackRef.current.getTracks().forEach(track => track.stop());\n      }\n\n      // Replace screen share track with camera track\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }).then(newStream => {\n        const videoTrack = newStream.getVideoTracks()[0];\n\n        // Replace track in all peers\n        Object.values(peersRef.current).forEach(({\n          peer\n        }) => {\n          const sender = peer.getSenders().find(s => s.track.kind === 'video');\n          if (sender) {\n            sender.replaceTrack(videoTrack);\n          }\n        });\n\n        // Update local state\n        setIsScreenSharing(false);\n        socketRef.current.emit('stop-sharing');\n\n        // Update stream\n        if (userVideo.current) {\n          userVideo.current.srcObject = stream;\n        }\n      }).catch(err => {\n        console.error(\"Error accessing camera:\", err);\n      });\n    } else {\n      // Start screen sharing\n      navigator.mediaDevices.getDisplayMedia({\n        cursor: true\n      }).then(screenStream => {\n        const screenTrack = screenStream.getVideoTracks()[0];\n        screenTrackRef.current = screenStream;\n\n        // Replace camera track with screen track in all peers\n        Object.values(peersRef.current).forEach(({\n          peer\n        }) => {\n          const sender = peer.getSenders().find(s => s.track.kind === 'video');\n          if (sender) {\n            sender.replaceTrack(screenTrack);\n          }\n        });\n\n        // Handle when user stops sharing via browser UI\n        screenTrack.onended = () => {\n          shareScreen(); // This will trigger the \"stop sharing\" logic\n        };\n\n        // Update local state\n        setIsScreenSharing(true);\n        socketRef.current.emit('start-sharing');\n\n        // Update local video display\n        if (userVideo.current) {\n          userVideo.current.srcObject = screenStream;\n        }\n      }).catch(err => {\n        console.error(\"Error sharing screen:\", err);\n      });\n    }\n  };\n  const sendMessage = message => {\n    const messageData = {\n      content: message,\n      sender: userName,\n      senderId: userId,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, messageData]);\n    socketRef.current.emit('send-message', message);\n  };\n  const copyRoomId = () => {\n    navigator.clipboard.writeText(roomId).then(() => {\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), 2000);\n    }, err => console.error('Could not copy room ID: ', err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"meeting-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Meeting: \", roomId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"copy-btn\",\n        onClick: copyRoomId,\n        children: isCopied ? 'Copied!' : 'Copy Room ID'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(VideoGrid, {\n        stream: stream,\n        userVideo: userVideo,\n        peers: peers,\n        userId: userId,\n        userName: userName,\n        isScreenSharing: isScreenSharing,\n        videoEnabled: videoEnabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), showChat && /*#__PURE__*/_jsxDEV(ChatPanel, {\n        messages: messages,\n        sendMessage: sendMessage,\n        userId: userId,\n        onClose: () => setShowChat(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this), showParticipants && /*#__PURE__*/_jsxDEV(ParticipantsPanel, {\n        participants: participants,\n        userId: userId,\n        onClose: () => setShowParticipants(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      toggleAudio: toggleAudio,\n      toggleVideo: toggleVideo,\n      shareScreen: shareScreen,\n      audioEnabled: audioEnabled,\n      videoEnabled: videoEnabled,\n      isScreenSharing: isScreenSharing,\n      toggleChat: () => setShowChat(!showChat),\n      toggleParticipants: () => setShowParticipants(!showParticipants),\n      endCall: () => window.location.href = '/'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n};\n_s(MeetingRoom, \"/ovvlMhkQfLHHVvtEYsxvUUpo18=\", false, function () {\n  return [useParams];\n});\n_c = MeetingRoom;\nexport default MeetingRoom;\nvar _c;\n$RefreshReg$(_c, \"MeetingRoom\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","io","Peer","Controls","VideoGrid","ChatPanel","ParticipantsPanel","jsxDEV","_jsxDEV","MeetingRoom","_s","roomId","socketRef","userVideo","peersRef","peers","setPeers","stream","setStream","audioEnabled","setAudioEnabled","videoEnabled","setVideoEnabled","showChat","setShowChat","showParticipants","setShowParticipants","messages","setMessages","participants","setParticipants","isScreenSharing","setIsScreenSharing","userId","setUserId","userName","setUserName","screenTrackRef","isCopied","setIsCopied","storedName","localStorage","getItem","Math","floor","random","uid","toString","substring","current","connect","process","env","REACT_APP_SERVER_URL","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","srcObject","emit","on","allParticipants","newUserId","newUserName","console","log","prev","peer","createPeer","id","from","signal","_participants$from","addPeer","peerUserName","destroy","newPeersRef","newPeers","newParticipants","message","isEnabled","isAudioEnabled","isVideoEnabled","sharingUserId","catch","err","error","alert","getTracks","forEach","track","stop","Object","values","disconnect","userToSignal","callerID","initiator","trickle","to","incomingSignal","toggleAudio","audioTrack","getAudioTracks","enabled","toggleVideo","videoTrack","getVideoTracks","shareScreen","newStream","sender","getSenders","find","s","kind","replaceTrack","getDisplayMedia","cursor","screenStream","screenTrack","onended","sendMessage","messageData","content","senderId","timestamp","Date","toISOString","copyRoomId","clipboard","writeText","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClose","toggleChat","toggleParticipants","endCall","window","location","href","_c","$RefreshReg$"],"sources":["C:/Users/raahu/Desktop/google-meet-clone/client/src/components/MeetingRoom.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport './MeetingRoom.css';\nimport Controls from './Controls';\nimport VideoGrid from './VideoGrid';\nimport ChatPanel from './ChatPanel';\nimport ParticipantsPanel from './ParticipantsPanel';\n\nconst MeetingRoom = () => {\n  const { roomId } = useParams();\n  const socketRef = useRef();\n  const userVideo = useRef();\n  const peersRef = useRef({});\n  const [peers, setPeers] = useState({});\n  const [stream, setStream] = useState(null);\n  const [audioEnabled, setAudioEnabled] = useState(true);\n  const [videoEnabled, setVideoEnabled] = useState(true);\n  const [showChat, setShowChat] = useState(false);\n  const [showParticipants, setShowParticipants] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [participants, setParticipants] = useState({});\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [userName, setUserName] = useState('');\n  const screenTrackRef = useRef(null);\n  const [isCopied, setIsCopied] = useState(false);\n\n  useEffect(() => {\n    // Get stored username or generate one\n    const storedName = localStorage.getItem('userName') || `User-${Math.floor(Math.random() * 1000)}`;\n    setUserName(storedName);\n    const uid = Math.random().toString(36).substring(2, 15);\n    setUserId(uid);\n\n    // Connect to socket\n    socketRef.current = io.connect(process.env.REACT_APP_SERVER_URL || 'http://localhost:5000');\n\n    // Get media stream\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then(currentStream => {\n        setStream(currentStream);\n        if (userVideo.current) {\n          userVideo.current.srcObject = currentStream;\n        }\n\n        // Join room\n        socketRef.current.emit('join-room', roomId, uid, storedName);\n\n        // Listen for room participants\n        socketRef.current.on('room-participants', allParticipants => {\n          setParticipants(allParticipants);\n        });\n\n        // Handle when new user connects\n        socketRef.current.on('user-connected', (newUserId, newUserName) => {\n          console.log(`User connected: ${newUserName}`);\n          \n          // Add to participants\n          setParticipants(prev => ({\n            ...prev,\n            [newUserId]: { userName: newUserName }\n          }));\n          \n          // Create peer connection for the new user\n          const peer = createPeer(newUserId, socketRef.current.id, currentStream);\n          \n          peersRef.current = {\n            ...peersRef.current,\n            [newUserId]: { peer }\n          };\n          \n          setPeers(prev => ({\n            ...prev,\n            [newUserId]: { peer, userName: newUserName }\n          }));\n        });\n\n        // Handle incoming signal\n        socketRef.current.on('signal', ({ from, signal }) => {\n          if (!peersRef.current[from]) {\n            // Create receiving peer if it doesn't exist\n            const peer = addPeer(from, signal, currentStream);\n            \n            peersRef.current = {\n              ...peersRef.current,\n              [from]: { peer }\n            };\n            \n            const peerUserName = participants[from]?.userName || 'Unknown User';\n            \n            setPeers(prev => ({\n              ...prev,\n              [from]: { peer, userName: peerUserName }\n            }));\n          } else {\n            // Signal the existing peer\n            peersRef.current[from].peer.signal(signal);\n          }\n        });\n\n        // Handle user disconnect\n        socketRef.current.on('user-disconnected', userId => {\n          console.log(`User disconnected: ${userId}`);\n          if (peersRef.current[userId]) {\n            peersRef.current[userId].peer.destroy();\n            \n            const newPeersRef = { ...peersRef.current };\n            delete newPeersRef[userId];\n            peersRef.current = newPeersRef;\n            \n            setPeers(prev => {\n              const newPeers = { ...prev };\n              delete newPeers[userId];\n              return newPeers;\n            });\n            \n            setParticipants(prev => {\n              const newParticipants = { ...prev };\n              delete newParticipants[userId];\n              return newParticipants;\n            });\n          }\n        });\n\n        // Handle incoming chat messages\n        socketRef.current.on('receive-message', (message) => {\n          setMessages(prev => [...prev, message]);\n        });\n\n        // Handle audio toggle events\n        socketRef.current.on('user-toggle-audio', (userId, isEnabled) => {\n          setParticipants(prev => ({\n            ...prev,\n            [userId]: {\n              ...prev[userId],\n              isAudioEnabled: isEnabled\n            }\n          }));\n        });\n\n        // Handle video toggle events\n        socketRef.current.on('user-toggle-video', (userId, isEnabled) => {\n          setParticipants(prev => ({\n            ...prev,\n            [userId]: {\n              ...prev[userId],\n              isVideoEnabled: isEnabled\n            }\n          }));\n        });\n\n        // Handle screen sharing events\n        socketRef.current.on('user-started-sharing', (sharingUserId) => {\n          setParticipants(prev => ({\n            ...prev,\n            [sharingUserId]: {\n              ...prev[sharingUserId],\n              isScreenSharing: true\n            }\n          }));\n        });\n\n        socketRef.current.on('user-stopped-sharing', (sharingUserId) => {\n          setParticipants(prev => ({\n            ...prev,\n            [sharingUserId]: {\n              ...prev[sharingUserId],\n              isScreenSharing: false\n            }\n          }));\n        });\n      })\n      .catch(err => {\n        console.error(\"Error accessing media devices:\", err);\n        alert(\"Unable to access camera and microphone. Please make sure they're connected and permissions are granted.\");\n      });\n\n    // Cleanup on component unmount\n    return () => {\n      // Stop all tracks\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n      if (screenTrackRef.current) {\n        screenTrackRef.current.getTracks().forEach(track => track.stop());\n      }\n      \n      // Close all peer connections\n      Object.values(peersRef.current).forEach(({ peer }) => {\n        peer.destroy();\n      });\n      \n      // Close socket connection\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n\n    peer.on('signal', signal => {\n      socketRef.current.emit('signal', { to: userToSignal, from: callerID, signal });\n    });\n\n    return peer;\n  };\n\n  const addPeer = (callerID, incomingSignal, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n\n    peer.on('signal', signal => {\n      socketRef.current.emit('signal', { to: callerID, from: userId, signal });\n    });\n\n    peer.signal(incomingSignal);\n\n    return peer;\n  };\n\n  const toggleAudio = () => {\n    if (stream) {\n      const audioTrack = stream.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n        setAudioEnabled(audioTrack.enabled);\n        socketRef.current.emit('toggle-audio', audioTrack.enabled);\n      }\n    }\n  };\n\n  const toggleVideo = () => {\n    if (stream) {\n      const videoTrack = stream.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !videoTrack.enabled;\n        setVideoEnabled(videoTrack.enabled);\n        socketRef.current.emit('toggle-video', videoTrack.enabled);\n      }\n    }\n  };\n\n  const shareScreen = () => {\n    if (isScreenSharing) {\n      // Stop screen sharing\n      if (screenTrackRef.current) {\n        screenTrackRef.current.getTracks().forEach(track => track.stop());\n      }\n      \n      // Replace screen share track with camera track\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then(newStream => {\n          const videoTrack = newStream.getVideoTracks()[0];\n          \n          // Replace track in all peers\n          Object.values(peersRef.current).forEach(({ peer }) => {\n            const sender = peer.getSenders().find(s => s.track.kind === 'video');\n            if (sender) {\n              sender.replaceTrack(videoTrack);\n            }\n          });\n          \n          // Update local state\n          setIsScreenSharing(false);\n          socketRef.current.emit('stop-sharing');\n          \n          // Update stream\n          if (userVideo.current) {\n            userVideo.current.srcObject = stream;\n          }\n        })\n        .catch(err => {\n          console.error(\"Error accessing camera:\", err);\n        });\n    } else {\n      // Start screen sharing\n      navigator.mediaDevices.getDisplayMedia({ cursor: true })\n        .then(screenStream => {\n          const screenTrack = screenStream.getVideoTracks()[0];\n          screenTrackRef.current = screenStream;\n          \n          // Replace camera track with screen track in all peers\n          Object.values(peersRef.current).forEach(({ peer }) => {\n            const sender = peer.getSenders().find(s => s.track.kind === 'video');\n            if (sender) {\n              sender.replaceTrack(screenTrack);\n            }\n          });\n          \n          // Handle when user stops sharing via browser UI\n          screenTrack.onended = () => {\n            shareScreen();  // This will trigger the \"stop sharing\" logic\n          };\n          \n          // Update local state\n          setIsScreenSharing(true);\n          socketRef.current.emit('start-sharing');\n          \n          // Update local video display\n          if (userVideo.current) {\n            userVideo.current.srcObject = screenStream;\n          }\n        })\n        .catch(err => {\n          console.error(\"Error sharing screen:\", err);\n        });\n    }\n  };\n\n  const sendMessage = (message) => {\n    const messageData = {\n      content: message,\n      sender: userName,\n      senderId: userId,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, messageData]);\n    socketRef.current.emit('send-message', message);\n  };\n\n  const copyRoomId = () => {\n    navigator.clipboard.writeText(roomId).then(\n      () => {\n        setIsCopied(true);\n        setTimeout(() => setIsCopied(false), 2000);\n      },\n      (err) => console.error('Could not copy room ID: ', err)\n    );\n  };\n\n  return (\n    <div className=\"meeting-room\">\n      <div className=\"room-header\">\n        <h2>Meeting: {roomId}</h2>\n        <button className=\"copy-btn\" onClick={copyRoomId}>\n          {isCopied ? 'Copied!' : 'Copy Room ID'}\n        </button>\n      </div>\n      \n      <div className=\"main-content\">\n        <VideoGrid\n          stream={stream}\n          userVideo={userVideo}\n          peers={peers}\n          userId={userId}\n          userName={userName}\n          isScreenSharing={isScreenSharing}\n          videoEnabled={videoEnabled}\n        />\n        \n        {showChat && (\n          <ChatPanel\n            messages={messages}\n            sendMessage={sendMessage}\n            userId={userId}\n            onClose={() => setShowChat(false)}\n          />\n        )}\n        \n        {showParticipants && (\n          <ParticipantsPanel\n            participants={participants}\n            userId={userId}\n            onClose={() => setShowParticipants(false)}\n          />\n        )}\n      </div>\n      \n      <Controls\n        toggleAudio={toggleAudio}\n        toggleVideo={toggleVideo}\n        shareScreen={shareScreen}\n        audioEnabled={audioEnabled}\n        videoEnabled={videoEnabled}\n        isScreenSharing={isScreenSharing}\n        toggleChat={() => setShowChat(!showChat)}\n        toggleParticipants={() => setShowParticipants(!showParticipants)}\n        endCall={() => window.location.href = '/'}\n      />\n    </div>\n  );\n};\n\nexport default MeetingRoom;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}